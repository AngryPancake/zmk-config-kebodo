/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    require-prior-idle-ms = <140>;
};

&mt {
    quick-tap-ms = <200>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        game_mod_on {
            bindings = <&to 6>;
            key-positions = <6 5 39>;
            layers = <0>;
        };

        game_mod_off {
            bindings = <&to 0>;
            key-positions = <6 5 40>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            layers = <0 1 6 7 3 4>;
        };

        slash {
            bindings = <&kp RA(SLASH)>;
            key-positions = <6 19>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <18 21>;
        };

        Backspace {
            bindings = <&kp INS>;
            key-positions = <11 12>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 3>;
        };

        minus {
            bindings = <&tp_minus_underscore>;
            key-positions = <8 9>;
        };

        LPare {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <21 22>;
        };

        RPare {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <22 23>;
        };

        Plus {
            bindings = <&tp_plus_equal>;
            key-positions = <9 10>;
        };

        Comma {
            bindings = <&kp RA(COMMA)>;
            key-positions = <33 32>;
        };

        Question {
            bindings = <&kp RA(QUESTION)>;
            key-positions = <7 8>;
        };

        Dot {
            bindings = <&kp RA(PERIOD)>;
            key-positions = <20 21>;
        };

        LBrac {
            bindings = <&mt LEFT_BRACE LEFT_BRACKET>;
            key-positions = <33 34>;
        };

        RBrac {
            bindings = <&mt RIGHT_BRACE RIGHT_BRACKET>;
            key-positions = <34 35>;
        };

        Quotes {
            bindings = <&kp RA(SQT)>;
            key-positions = <24 23>;
        };

        ret {
            bindings = <&kp RET>;
            key-positions = <22 23 21>;
        };

        bspace2 {
            bindings = <&morph_del>;
            key-positions = <17 16>;
            layers = <0 1 2>;
        };

        num_word {
            bindings = <&num_word 1>;
            key-positions = <39 42>;
            layers = <0>;
        };

        Question2 {
            bindings = <&kp RA(QUESTION)>;
            key-positions = <11 10>;
            layers = <0 1 2 3 4 5>;
        };

        toSwap {
            bindings = <&kp LC(LA(LS(C)))>;
            key-positions = <28 29>;
            layers = <0>;
        };

        at2 {
            bindings = <&kp AT_SIGN>;
            key-positions = <3 4>;
        };
    };

    behaviors {
        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 MINUS PLUS EQUAL>;
            ignore-modifiers;
        };

        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <PG_UP PG_DN>;
            ignore-modifiers;
        };

        nav_worder: nav_worder {
            compatible = "zmk,behavior-tri-state";
            label = "nav cluster smart layer";
            #binding-cells = <0>;
            bindings = <&to 0>, <&none>, <&nav_word 2>;
        };

        altaber: altaber {
            compatible = "zmk,behavior-tri-state";
            label = "ALT Win Switcher";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
        };

        tilde_tab: tilde_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_TAB";
            bindings = <&kp GRAVE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT|MOD_RGUI|MOD_LGUI)>;
            keep-mods = <(MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };

        bt_sel: bt_sel {
            compatible = "zmk,behavior-hold-tap";
            label = "tap:select,hold:clear";
            bindings = <&clr_bt_param>, <&to_bt_param>;

            #binding-cells = <2>;
            tapping-term-ms = <3000>;
        };

        LMeta: LMeta {
            compatible = "zmk,behavior-mod-morph";
            label = "LMETA";
            bindings = <&mt LEFT_META LG(SPACE)>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        t_tab: t_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "T_TAB";
            bindings = <&kp T>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT|MOD_RGUI|MOD_LGUI)>;
            keep-mods = <(MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };

        LGUIHR: LGUIHR {
            compatible = "zmk,behavior-hold-tap";
            label = "LGUIHR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 14 26 27 15 2 3 16 28 29 17 4 5 18 30 31 19 6 1 2 3 4 5 6 14 15 16 17 18 19 26 27 28 29 30 31>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
        };

        LGUI_TAB: LGUI_TAB {
            compatible = "zmk,behavior-mod-morph";
            label = "LGUI_TAB";
            bindings = <&kp LEFT_GUI>, <&kp LS(TAB)>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_LGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        morph_del: morph_del {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        HR: HR {
            compatible = "zmk,behavior-hold-tap";
            label = "HR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            quick-tap-ms = <160>;
            require-prior-idle-ms = <140>;
        };

        HR_S: HR_S {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_S";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            quick-tap-ms = <180>;
            require-prior-idle-ms = <140>;
            hold-while-undecided;
        };

        HR_C: HR_C {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_C";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
            quick-tap-ms = <160>;
            require-prior-idle-ms = <140>;
            hold-while-undecided;
        };

        dot: dot {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT";
            bindings = <&kp RA(PERIOD)>, <&kp RA(COMMA)>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        LT1_DOT: LT1_DOT {
            compatible = "zmk,behavior-hold-tap";
            label = "LT1_DOT";
            bindings = <&mo>, <&dot>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            hold-while-undecided;
        };

        tp_plus_equal: tp_plus_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "TP_PLUS_EQUAL";
            bindings = <&kp KP_EQUAL>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tp_minus_underscore: tp_minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "TP_MINUS_UNDERSCORE";
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        HR_A: HR_A {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_A";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
            quick-tap-ms = <160>;
            require-prior-idle-ms = <140>;
        };
    };

    macros {
        to_bt_param: to_bt_param {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&out OUT_BLE &macro_param_1to2>,
                <&macro_press>,
                <&bt BT_SEL MACRO_PLACEHOLDER>;

            label = "TO_BT_PARAM";
        };

        clr_bt_param: clr_bt_param {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&out OUT_BLE &macro_param_1to2>,
                <&macro_press>,
                <&bt BT_SEL MACRO_PLACEHOLDER>,
                <&macro_press>,
                <&bt BT_CLR>;

            label = "CLR_BT_PARAM";
        };

        close_term: close_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp LC(C) &kp LC(D)>;
            label = "CLOSE_TERM";
        };

        game_d: game_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp A>,
                <&macro_press>,
                <&kp D>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp D>;

            label = "GAME_D";
        };

        game_a: game_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp D>,
                <&macro_press>,
                <&kp A>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp A>;

            label = "GAME_A";
        };

        nav_macro: nav_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 2 &nav_word 2>;
            label = "NAV_MACRO";
        };

        MCR_1: MCR_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(F1)) &kp LS(C) &kp O &kp D &kp E &kp N1 &kp LS(W) &kp E &kp W &kp E>;
            label = "MCR_1";
        };

        MCR_2: MCR_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(F1)) &kp D &kp I &kp N9 &kp B &kp S &kp LS(D) &kp U &kp N>;
            label = "MCR_2";
        };

        close: close {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp F13>;
            label = "CLOSE";
        };

        diskdecr: diskdecr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(E) &kp K &kp LS(D) &kp GT &kp A &kp TILDE &kp LS(B) &kp UNDER &kp N2 &kp U &kp DOT &kp LS(T) &kp LS(U) &kp F &kp LS(S) &kp AMPS &kp LS(D) &kp LS(X) &kp GRAVE &kp LS(Z) &kp G &kp LS(K) &kp AMPS &kp LS(P) &kp N8 &kp X &kp LS(V) &kp RPAR &kp LT &kp LS(A) &kp LBKT &kp N2 &kp LS(P) &kp EQUAL &kp LS(D) &kp D &kp RBRC &kp J &kp LS(D) &kp G>;
            label = "DISKDECR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                       GUI | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&LMeta  &kp GRAVE      &kp Q             &HR_C LCTRL W  &lt 5 E             &kp R          &kp T        &kp Y            &kp U          &kp I        &kp O          &kp P                      &kp LBKT           &mt LMETA BACKSLASH
        &LMeta         &HR_A LEFT_ALT A  &kp S          &HR LGUI D          &HR_S LSHFT F  &kp G        &kp H            &HR_S RSHFT J  &HR RGUI K   &HR_C RCTRL L  &HR_A RIGHT_ALT SEMICOLON  &kp SQT
        &mt LCTRL DOT  &HR_A LEFT_ALT Z  &kp X          &kp C               &kp V          &kp B        &kp N            &kp M          &kp COMMA    &kp DOT        &kp FSLH                   &kp RIGHT_BRACKET
                                                        &mt LEFT_SHIFT TAB  &lt 1 SPACE    &lt 2 RET    &lt 2 BACKSPACE  &lt 1 DELETE   &num_word 1
                                                                                           &kp LGUI                                                                 &num_word 1
            >;

            label = "MAIN";
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |BSPC |BSPC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  -  |  +  |
            //       |LSFT |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  _  |
            //       |CTRL |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 |F11/12|
            //                   | GUI | RSE | SPC | BSPC|   |BSPC |     |     |

            bindings = <
&kp BACKSPACE  &kp BACKSPACE  &kp N1        &kp N2      &kp N3         &kp N4        &kp N5           &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &kp MINUS             &mt PLUS EQUAL
               &sk LSHFT      &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &mt LSHFT UNDERSCORE
               &kp LCTRL      &kp F1        &kp F2      &kp F3         &kp F4        &kp F5           &kp F6         &kp F7        &mt F8 COMMA  &mt F9 DOT    &kp F10       &mt F12 F11
                                                        &trans         &trans        &trans           &trans         &trans        &trans
                                                                                     &trans                                                                    &num_word 1
            >;
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&nav_worder  &altaber    &kp BACKSPACE  &kp PG_UP  &kp UP_ARROW             &kp PG_DN  &kp HOME                           &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &trans  &trans  &trans  &trans
             &sk LSHIFT  &trans         &kp LEFT   &mt LEFT_GUI DOWN_ARROW  &kp RIGHT  &kp END                            &kp C_VOL_DN          &kp C_VOL_UP          &trans  &trans  &trans  &trans
             &kp LCTRL   &trans         &diskdecr  &MCR_2                   &MCR_1     &mt LC(PRINTSCREEN) PRINTSCREEN    &trans                &trans                &trans  &trans  &trans  &trans
                                                   &trans                   &trans     &trans                             &trans                &trans                &trans
                                                                                       &trans                                                                                         &trans
            >;
        };

        fn {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&sys_reset  &out OUT_BLE  &none  &none  &bootloader  &none        &bt_sel 0 0    &bt_sel 0 0  &none        &bootloader  &none  &none   &out OUT_USB  &sys_reset
            &none         &none  &none  &none        &none        &bt_sel 1 1    &bt_sel 1 1  &none        &none        &none  &none   &none
            &out OUT_USB  &none  &none  &bt_sel 4 4  &bt_sel 3 3  &bt_sel 2 2    &bt_sel 2 2  &bt_sel 3 3  &bt_sel 4 4  &none  &none   &out OUT_USB
                                        &soft_off    &soft_off    &trans         &trans       &soft_off    &soft_off
                                                                  &trans                                                       &kp N0
            >;
        };

        a_layer {
            bindings = <
&trans  &trans     &trans  &trans     &trans       &kp RET      &kp LC(T)      &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans     &trans  &trans     &trans       &kp LC(F)    &trans         &trans  &trans  &trans  &trans  &trans  &trans
        &kp LC(A)  &trans  &kp LC(X)  &kp LC(INS)  &kp LS(INS)  &kp LS(INS)    &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans       &trans       &trans         &trans  &trans  &trans
                                                                &trans                                         &kp N0
            >;

            label = "A";
        };

        e_layer {
            bindings = <
&trans  &kp BACKSPACE  &trans  &kp LC(PG_UP)       &trans       &kp LC(PG_DN)  &kp LC(T)      &trans     &trans  &trans  &trans     &trans  &trans  &trans
        &trans         &trans  &kp LA(LEFT_ARROW)  &trans       &kp LA(RIGHT)  &kp LC(R)      &trans     &trans  &trans  &kp LC(L)  &trans  &trans
        &trans         &trans  &trans              &close_term  &close         &kp LC(W)      &kp LC(N)  &trans  &trans  &trans     &trans  &trans
                                                   &trans       &trans         &kp RET        &trans     &trans  &trans
                                                                               &close_term                                          &kp 0
            >;
        };

        game {
            bindings = <
&kp LGUI  &t_tab  &kp TAB    &kp Q    &kp W           &kp E      &kp R          &kp Y            &kp U       &kp I      &kp O    &kp P     &kp LBKT  &kp RET
          &kp G   &kp LSHFT  &game_a  &kp S           &game_d    &kp F          &kp H            &kp J       &kp K      &kp L    &kp SEMI  &kp SQT
          &kp B   &kp LCTRL  &kp Z    &kp X           &kp C      &kp V          &kp N            &kp M       &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                                      &kp LEFT_SHIFT  &kp SPACE  &lt 7 ENTER    &lt 7 BACKSPACE  &kp DELETE  &kp LGUI
                                                                 &kp LALT                                                        &kp N0
            >;
        };

        GameFn {
            bindings = <
&kp CAPS  &kp ESCAPE      &kp N9  &kp N1  &kp N2        &kp N2     &kp N3         &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none  &none  &none   &none  &none
          &kp LEFT_SHIFT  &kp N8  &kp N7  &kp N6        &kp N5     &kp N4         &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none  &none  &none   &none
          &kp LCTRL       &kp P   &kp J   &kp I         &kp M      &kp LC(F12)    &none                 &none                 &none  &none  &none   &none
                                          &kp LEFT_GUI  &kp SPACE  &none          &none                 &none                 &none
                                                                   &mo 3                                                                    &kp N0
            >;
        };

        Swap {
            bindings = <
&kp RBKT  &kp LBKT  &kp P     &kp O    &kp I      &kp U   &kp Y     &trans  &trans  &trans  &trans  &trans  &trans  &trans
          &kp SQT   &kp SEMI  &kp L    &kp K      &kp J   &kp H     &trans  &trans  &trans  &trans  &trans  &trans
          &kp BSLH  &kp FSLH  &kp DOT  &kp COMMA  &kp M   &kp N     &trans  &trans  &trans  &trans  &trans  &trans
                                       &trans     &trans  &trans    &trans  &trans  &trans
                                                          &trans                                    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Fn {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
